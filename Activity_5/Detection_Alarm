int TRIG = 2; // Trigger pin
int ECHO = 4; // Echo pin
int led1 = 7;
int button = 8;
int buzzer = 12;
int isButtonOn = 0;

void setup() {
  // Initialize serial communication at a desired baud rate
  Serial.begin(9600);

  // Set the trigger pin as an output
  pinMode(TRIG, OUTPUT);

  // Set the echo pin as an input
  pinMode(ECHO, INPUT);

  // Declare the buzzer as an output
  pinMode(buzzer, OUTPUT);

  // Map the button on the pin number 8
  pinMode(button, INPUT);
}

void loop() {
  // Send a pulse of 10 microseconds to trigger the sensor
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);

  // Measure the time taken for the echo pulse to return
  long duration = pulseIn(ECHO, HIGH);

  // Calculate the distance based on the speed of sound (approximately 0.0343 cm/Î¼s)
  float distance = duration * 0.0343 / 2;

  // Print the measured distance to the serial monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Introduce a delay to avoid overwhelming the serial monitor
  delay(100);

  // Check if the button is pressed; if yes, turn off the buzzer and set isButtonOn to 1
  // If the button is not pressed, handle the distance-based buzzer tones
 
    if (distance >= 20 && distance < 30) {
      tone(buzzer, 3000); // High frequency tone
      delay(1000);
      noTone(buzzer);
      delay(1000);
    } 
    else if (distance >= 10 && distance < 20) {
      tone(buzzer, 1500); // Medium frequency tone
      delay(500);
      noTone(buzzer);
      delay(500);
    } 
    else if (distance > 0 && distance < 10) {
      tone(buzzer, 750); // Low frequency tone
      delay(100);
      noTone(buzzer);
      delay(100);
    } 
    else if (distance > 30) {
      noTone(buzzer); // Turn off the buzzer if the distance is greater than 30 cm
    }
   else {
    // If the button has been pressed, reset the isButtonOn flag when distance is > 30
    if (distance > 30) {
      isButtonOn = 0;
    }
  }


}
